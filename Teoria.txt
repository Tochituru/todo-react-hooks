Closure

La forma en que una función puede acceder a datos a través del contexto, no de forma explícita.

¿Qué es Hooks?

El 80 % de la magia de react ocurre en React.Component. (Los métodos básicos de ComponentDidMount, etc)

No obstante, React no permite utilizarlo en los functional components. A menos que usemos Hooks.

Literalmente, hackearon la clase Component, tomaron las cosas copadas y las expusieron para que Functional Components puedan utilizarlas. Esto son los hooks.

Con eso, podemos desarrollar una app que hace lo mismo que todolist de manera más legible, más escalable y, sobre todo, en muchas menos líneas de código.

Hooks utiliza el paradigma de programación funcional.
Este paradigma trata las funciones como datos. A una función podemos pasarle otras funciones (por eso se trabaja con funciones puras).

¿Cómo usamos Hooks?

En un functional component, que ahora será App.js, importamos {useState}
Es una función.

Luego lo desestructuramos antes del return.
Su destructuración siempre devuelve una tupla:
- getter --> el estado inicial (nos da datos)
- setter --> con el que vamos a modificar (modifica los datos)

    let [state, setState] = useState('titulo')

En la función en sí (useState), vamos a pasarle un parámetro, que será el contenido del getter.

Luego, establecemos un evento (como onClick), al que le agregamos la función setState('parámetro'). Cuando yo hago click, ejecuta el evento onclick, llama al setter y ejecuta ese valor. 

Podemos usar useState cuantas veces queramos, y podemos llamar su getter y setter como se nos cante.

El getter va a ser el estado inicial que decidamos. Puede estar vacío, ser una string y hasta ser un objeto.
En caso de ser un objeto, deberemos llamar a las propiedades del objeto para los valores y demáses.
IMPORTANTE: Si es vacío, marcarlo como tal ('', [''], {''} ) para que no quede como undefined.

Hooks permite manejar varias tuplas a la vez. No obstante, conviene manejar un useState a la vez y tener varios manejadores de estado externos a los componentes. Los proyectos levantan un hooks (hecho manualmente) con el estado de la aplicación y si hace falta, un hook local para ese componente.

{useEffect}
Es una función que permite hacer un montón de cosas. Depende de nosotras determinar cómo funciona.
Casi todas las cosas que arrancan con "use" son hooks.

Es una función que recibe al menos dos parámetros. 
El primero es una función propiamente dicha.
Primero, probamos un console log.
Aparece al principio de todo porque es el equivalente de ComponentDidMount. 
El comportamiento default es tomar el contenido del primer parámetro (en este caso, el consolelog) y ejecutarlo cuando se cumple lo que conocemos como ComponentDidMount.
Se sigue disparando cada vez que hago una modificación en el estado. Combina ComponentDidMount con ComponentDidUpdate.

Si tenemos operaciones costosas en cuanto a algoritmos, no queremos que se repita tantas veces.

CUando usábamos ComponentDidUpdate, hicimos que se persista todo el contenido, sin ninguna clase de fondo.

ComponentDidUpdate normalmente recibe dos parámetros: perviousState (el estado anterior, que podría levantar). No obstante, sigue tomando un montón de memoria.

El segundo parámetro de useEffect es una lista. En este caso, será todoList. Así, le decimos que quiero que se ejecute una vez cuando se ejecuta la aplicaicón y quiero que te suscribas (estar pendiente de algo) al estado y cuando sea modificado, ejecuta lo que tengo arriba (el primer parámetro).

Esto, a nivel de rendimiento, es la gloria. 

Otra cosa que tiene el useEffect es la opción de return.

La función se va a ejecutar cuando termine de cargar y cuando se hagan cambios en el estado al cual me suscribí.
Además, la función tiene un return que devuelve una función. ¿Cuándo se ejecuta? Cuando lo que estamos escuchando es desmontado. React monta un componente en pantalla y lo desmonta en un momento dado. Al navegar en el router, tenemos un container que es la home y otro container que es quienes somos. React desmonta la home y monta quienes somos (cuando navegamos sla páinga). Ese ejercicio de desmontar ejecuta el evento "me fui" y ejecuta la función que se encuentra dentro de return.
¿Por qué me interesaría hacer algo cuando se va de mi componente? Porque una tarea muy común es suscribirnos a eventos, como por ejemplo, scroll, y permiten que sucedan cosas cuando scrolleamos (que se vea más contenido a medida que hacemos scroll). Esa función lo que hace es fijarse cuántos pixeles avanzó para determinar qué queremos hacer. 

Suscribirse a esos estados tiene un costo computacional importante (scroll funca todo el tiempo). Si nos suscribimos a esa clase de eventos y no nos desuscribimos, terminamos rompiendo la compu del usuario. Porque la escucha queda activada.

Es importantísimo desuscribirse de los eventos al desmontar un componente. En el caso de useEffect, está dentro del return de la primera función.
En el casoe de componentes, está dentro de componentWillUnmount(){},

Entonces, useEffect nos permite abreviar al código. Podemos usarlo la cantidad de veces que queramos. Puede haber uno suscrito a nada, uno suscrito al todolist, unopara que se ejecute solamente cuando se desmonte nuestro componente.
La desventaja es que, al ser tan abstracto y manejar tantas distintas situaciones, es que hay que probarlo mucho hasta poder resolverlo. Porque no es tan legible de entrada (es mera sintaxis).

Primero, lo que vamos a hacer es suscribirnos al todolist, y hacer la presistencia.
EL JSON va a guardar el estado armado o la lista vacía.
Es importante recordar que va a romper la compu de una, porque le estoy diciendo: cada vez que cambia la lista, haz esto (entonces infinite loop).

Si en el segundo parámetro no ponemos nada, se dispara cuando renderiza y cada vez que cambia el estado. si pones los corchetes con un estado (p. ej. todolist), se dispara cuando se renderiza y cuando se cambia ese estado en particular. Si pones los corchetes vacíos, es un punto medio. Lo corta en el didmount.

Todos los useEffect se disparan con el ComponentDidMount, por lo que los tres useEffect que estamos usando se disparan al menos una vez.

Si no tengo un parámetro en la segunda posición, se va a dispara cada vez que cambia el estado (por ejemplo, cuando escribo en el input).

Levantar del storage nunca se volvió a disparar porque es el didmount de toda la vida. Solo se disparó cuando se levantó. Tiene una lista y está esperando que le digas qué lista tiene que escuchar. COmo está vacía, no se vuelve a activar. Es el comportamiento esperado y buscamos que no se active infinitamente.

Guardar en storage (con todolist como segundo parámetro), se disparó dos veces. La primera cuando se didmount, y cuando hubo un cambio en el estado.

No hace falta hacer las tres validaciones, sino que depende de qué vamos a hacer.

Por lo general, vamos a usar solo el guardo.

useEffect nos va a permitir hacer funciones en el ciclo de vida.

useContext permite exponer un custom-hook para que varios componentes lo usen.

Las funciones podemos guardarlas en otro lugar incluso.

Esas funciones vamos a tener que agregarle otros parámetros, pero podremos extraerlas (algo que componentes no nos dejan).

Si no están relacionadas con la vista, conviene llevarlas a helpers. (son funciones puras, operaciones, superagnósticas).